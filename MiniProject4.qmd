---
title: "MiniProject4"
format: html
editor: visual
---

# Question: Are some communities in Minneapolis more dangerous than other Communities in terms of crime?

```{r echo=TRUE,message=FALSE}
# Look at day22(redlining) for leaftlet examples
library(tidyverse)
library(stringr)
library(tidyverse)
library(sf)     # R wrapper around GDAL/OGR
library(leaflet)    # for fortifying shapefiles
library(leaflet.extras)   # For leaflet heatmaps
```

## Read in shapefiles that will be used.

```{r echo=TRUE,message=FALSE}
# Read in the communities data
# DSN - location of shp files
# Layer - name of all the files in DSN (different extensions, same names)
mn_comm <- st_read(dsn="Communities-SHP/", layer="Minneapolis_Communities")
minn_pre <- st_read(dsn="Minneapolis_Police_Precincts-SHP/",
                         layer="Police_Precincts")
police_shootings <- st_read(dsn="Police_Officer_Involved_Shootings/",
                            layer="Police_Officer_Involved_Shootings")

police_force <- st_read(dsn="Police_Use_of_Force",
                        layer="Police_Use_of_Force")

# -93.029651 CenterLong not in minnneapolis
# 45.196298 CenterLat
police_shootings <- police_shootings |>
  filter(CenterLati != 45.196298)

# glimpse(mn_comm)
# glimpse(minn_pre)
# glimpse(police_shootings)
# glimpse(police_force)
```
## Build a "base" plot from the minneapolis precints shpfiles.

```{r}
pre_pal <- colorFactor(palette="Set2",
                       domain=minn_pre$PRECINCT)
pre <-
  leaflet() |> 
  # addTiles() |>
  addProviderTiles(providers$CartoDB.DarkMatter) |>
  addPolygons(data=minn_pre,
              weight = 5,
              color = ~pre_pal(PRECINCT),
              opacity = 1,
              fillOpacity=1,
              dashArray="3",
              fillColor = ~PRECINCT#,
              #popup=~PRECINCT
              ) |>
  addLegend(
    data = minn_pre,
    title = "Precints",
    pal = pre_pal,
    values = ~PRECINCT,
    opacity = 0.6
  )
pre
```

## Scrape information from some random website. Couldn't find an open dataset of neighborhoods grouped by community, could also just use a heatmap for neighborhoods (prob. much better).

```{r}
library(rvest)
url <- "https://homesmsp.com/2011/09/minneapolis-neighborhoods-by-community.html"
# Scrape url for strong elements (communities)
html_comm <- url |>
  read_html() |>
  html_elements("strong") |>
  html_text2()
#html_comm

# replace first param (exact string) with nothing for every string in list
comm <- gsub(" Community Neighborhoods â€“ average price","",html_comm)
comm <- gsub("CALHOUN/ISLES", "Calhoun Isle", comm)
comm <- gsub("[/]", "", comm)
comm <- comm[c(-12,-13)] # remove info that are not communitys
comm <- str_to_lower(comm) # lower all casing
comm <- str_to_title(comm) # use title casing for communities
#comm

html_neigh_uls <- url |>
  read_html() |>
  # Main Content inside div with class=infinite-single-article-content
  # Use chrome dev tools
  html_elements(".infinite-single-article-content ul")
#html_neigh_uls

##--------------------WORKING-----------------------------##
neigh_list <- list()
# loop through ul's in html_neigh
#html_neigh_uls

for (ul in html_neigh_uls){
  li_list <- ul |>
    html_elements("li") |>
    html_text2()
  # append list to list (each index is a neighborhood)
  neigh_list <- append(neigh_list, list(li_list))
}
#neigh_list

cleaned <- list()
for (list in neigh_list){
  # Find dots, $, 0-9 and comma and replace with nothing
  list <- gsub("[.$0-9,]", "", list)
  # Replace dashes/forward slah in neighborhood names with spaces instead
  list <- gsub("[-/]", " ", list)
  # Remove trailing white space from strings in list
  list <- trimws(list)
  #print(list)
  cleaned <- append(cleaned, list(list))
}
cleaned <- cleaned[-12] # remove anchor tag text from html
#cleaned

# Check that lists are same length list of list = length of comm. list.
#print(length(cleaned))
#print(length(comm))

#df <- data.frame(comm, cleaned)
#df
# Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, :
# arguments imply differing number of rows: 7, 13, 5, 6, 9, 2, 8, 11 (What does this mean in r?)

df1 <- data.frame()
for (x in 1:11){
  df <- data.frame(comm[[x]], cleaned[[x]])
  df1 <- rbind(df1, df)
}
#df1

# Change column names.
colnames(df1)[1] <- "Community"
colnames(df1)[2] <- "Neighborhood"
#df1

# Correct some differences in naming between scraped and open dataset.
police_force <- police_force |>
  mutate(Neighborho = gsub(" - ", " ", Neighborho),
         Neighborho = gsub("[.']", "", Neighborho))
# Check neighborhood names in police_force/new dataframe
filtered <- police_force |>
  distinct(police_force$Neighborho)

#view(filtered)
#view(df1)

# check non-matches and fix
df1 |>
  #left_join(filtered, by=c("Neighborhood"="police_force$Neighborho"))
  anti_join(filtered, by=c("Neighborhood"="police_force$Neighborho"))

# Add the missing rows. (Old = duplicates)
df1[nrow(df1) + 1,] <- c("Phillips", "Phillips West")
df1[nrow(df1) + 1,] <- c("Phillips", "East Phillips")
# Spacing might be off on this one, looks same.
df1[nrow(df1) + 1,] <- c("University", "Nicollet Island East Bank")
df1[nrow(df1) + 1,] <- c("Calhoun Isle", "ECCO")
df1[nrow(df1) + 1,] <- c("University", "Prospect Park East River Road")

#write.csv(df1, "some_name.csv")
```
## Aggregate number of crimes to attach to communitys in Minneapolis.

```{r}
#mn_comm # just shapes of communities
aggregated <- police_force |>
  inner_join(df1, c("Neighborho" = "Neighborhood"))

glimpse(aggregated)

police_force

aggregated <- aggregated |>
  mutate(is_m = if(Sex == "Male"){1}else{0},
         is_f = if(Sex == "Female"){1}else{0})

summ <- aggregated |>
  group_by(Community) |>
  summarize(num_crimes = n(),
            rate_m=sum(aggregated$Sex=="Male"),
            rate_f=sum(aggregated$Sex=="Male"))
view(summ)

# have to drop geometry to join with other spatial data frame (mn_comm)
summ <- st_drop_geometry(summ)
mn_comm <- mn_comm |>
  inner_join(summ, by=c("CommName"="Community"))
#mn_comm
```
## In the following choropleth map, community boundaries are drawn on the map. On top of it, there is also another layer for the five police precincts in Minneapolis. From the choropleth, we can conclude that some communities are more dangerous than others, but this could also be because the population size in the city is denser than in the suburbs. We can also see that you are more likely to be shot by an officer or killed in the more dangerous communities. Population size is a question that I would delve into in the future by finding a dataset for populations per neighborhood or by the community to further illustrate in this map.

```{r}
# https://rstudio.github.io/leaflet/choropleths.html

# Use continous color pallete for chloropeth.
neighPal <- colorFactor(palette="YlOrRd",
                                 domain=mn_comm$num_crimes)

# Label fatal shootings as red, non-fatal as red.
fatalPal <- colorFactor(palette=c("orange", "red"),
                          domain=police_shootings$SubjectFat)
labels <- sprintf(
  "<strong>%s</strong><br>Total Crimes: %d",
  mn_comm$CommName, mn_comm$num_crimes
) %>% lapply(htmltools::HTML)

mn <- pre |>
  addPolygons(data=mn_comm,
              weight = 1,
              color = "white",
              fillColor = ~neighPal(num_crimes),
              fillOpacity = 0.3,
              highlight = highlightOptions(weight=3,
                                           color="red",
                                           bringToFront=TRUE),
              label=labels,
              labelOptions = labelOptions(style=list("font-weight"="normal"
                                                 ,padding="3px 8px"),
                                          textsize = "15px",
                                          direction = "auto"))
mn
# Police Shootings in Minneapolis Neighborhoods
# Orange - non-fatal
# Red - person died
mn |>
  addCircleMarkers(data=police_shootings,
             ~CenterLong,
             ~CenterLati,
             color=fatalPal(police_shootings$SubjectFat),
             radius=4,
             # popup=~as.character(SubjectFat),
             stroke=FALSE, fillOpacity=1)
```